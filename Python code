import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = "exercise_dataset.csv"
data = pd.read_csv(file_path)

# Drop the 'ID' column and handle missing values
data_cleaned = data.drop(columns=['ID']).dropna()

# One-hot encode categorical columns
categorical_columns = ['Exercise', 'Gender', 'Weather Conditions', 'Exercise Intensity']
encoder = OneHotEncoder(drop='first', sparse=False)
encoded_categorical_data = pd.DataFrame(
    encoder.fit_transform(data_cleaned[categorical_columns]),
    columns=encoder.get_feature_names_out(categorical_columns)
)

# Merge encoded columns with the rest of the dataset
data_cleaned = data_cleaned.drop(columns=categorical_columns)
data_cleaned = pd.concat([data_cleaned, encoded_categorical_data], axis=1)

# Scale numerical columns
scaler = StandardScaler()
numerical_columns = ['Calories Burn', 'Dream Weight', 'Actual Weight', 'Age', 'Duration', 'Heart Rate', 'BMI']
data_cleaned[numerical_columns] = scaler.fit_transform(data_cleaned[numerical_columns])

# Descriptive statistics
print(data_cleaned.describe())

# Correlation heatmap
sns.heatmap(data_cleaned.corr(), annot=True, fmt='.2f', cmap='coolwarm')
plt.show()

# Define features and target
X = data_cleaned.drop(columns=['Actual Weight'])  # 'Actual Weight' is the target variable
y = data_cleaned['Actual Weight']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Regressor model
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

# Cross-validation
cross_val_scores = cross_val_score(rf_model, X_train, y_train, cv=5, scoring='r2')
print(f"Cross-Validation Scores: {cross_val_scores}")
print(f"Mean CV Score: {cross_val_scores.mean():.2f}")

# Feature importance plot
feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind='barh')
plt.show()
